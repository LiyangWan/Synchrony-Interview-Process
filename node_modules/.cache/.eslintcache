[{"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/index.js":"1","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/App.js":"2","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/reportWebVitals.js":"3","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/NewInterview.js":"4","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/HomePage.js":"5","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/EditTemplates.js":"6","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/Interviews.js":"7","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Navbar.js":"8","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/aws-exports.js":"9"},{"size":638,"mtime":1706209752488,"results":"10","hashOfConfig":"11"},{"size":913,"mtime":1706210638471,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1706201576860,"results":"13","hashOfConfig":"11"},{"size":1929,"mtime":1706201770307,"results":"14","hashOfConfig":"11"},{"size":1483,"mtime":1706211523089,"results":"15","hashOfConfig":"11"},{"size":339,"mtime":1706201576859,"results":"16","hashOfConfig":"11"},{"size":2576,"mtime":1706201576859,"results":"17","hashOfConfig":"11"},{"size":568,"mtime":1706211388982,"results":"18","hashOfConfig":"11"},{"size":912,"mtime":1706209120898,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f5u9a7",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/index.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/App.js",["48"],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/reportWebVitals.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/NewInterview.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/HomePage.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/EditTemplates.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Dashboard/Interviews.js",["49"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport logoImage from './synchrony-logo-1.png';\nimport './Interviews.css';\nimport Navbar from '../Navbar';\nimport HomePage from '../HomePage';\n\nfunction Interviews() {\n  const [interviews, setInterviews] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredInterviews, setFilteredInterviews] = useState([]);\n\n  useEffect(() => {\n    const fetchInterviews = async () => {\n      try {\n        const { data } = await axios.get('https://rv0femjg65.execute-api.us-east-1.amazonaws.com/default/InterviewsAccess');\n        setInterviews(data);\n      } catch (error) {\n        console.error('Error fetching interviews:', error);\n      }\n    };\n\n    fetchInterviews();\n  }, []);\n\n  useEffect(() => {\n    const results = interviews.filter(interview => {\n      const interviewer = interview.Interviewer ? interview.Interviewer.toLowerCase() : '';\n      const name = interview.Name ? interview.Name.toLowerCase() : '';\n      // Assuming you have a Date property in your interview objects.\n      const date = interview.Date ? interview.Date.toLowerCase() : '';\n  \n      return interviewer.includes(searchTerm.toLowerCase()) ||\n             name.includes(searchTerm.toLowerCase()) ||\n             date.includes(searchTerm.toLowerCase());\n    });\n    setFilteredInterviews(results);\n  }, [searchTerm, interviews]);\n  \n\n  const handleSearch = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <div className=\"interviews-container\">\n      <div className=\"header\">\n        <Link to =\"/\">\n        <img src={logoImage} alt=\"Synchrony Logo\" className=\"logo\" />\n        </Link>\n        <Navbar />\n      </div>\n      <div className=\"portal-header-container\">\n        <h1 className=\"recruiting-portal-header\">Recruiting Portal</h1>\n      </div>\n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by interviewer, applicant, or date\"\n          value={searchTerm}\n          onChange={handleSearch}\n          className=\"search-bar\"\n        />\n      </div>\n      <div className=\"interviews-list\">\n  {filteredInterviews.map((interview) => (\n    <div key={interview.InterviewID} className=\"interview-item\">\n      <p>Interview ID: {interview.InterviewID}</p>\n      <p>Interviewer: {interview.Interviewer || 'N/A'}</p> {/* If interviewer is undefined, display 'N/A' */}\n      <p>Name: {interview.Name}</p>\n    </div>\n  ))}\n</div>\n\n    </div>\n  );\n}\n\nexport default Interviews;\n","/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/components/Navbar.js",[],[],"/Users/damianmiskow/Desktop/Projects/Synchrony/Synchrony_Login/Synchrony-Interview-Process/src/aws-exports.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":18},{"ruleId":"50","severity":1,"message":"54","line":7,"column":8,"nodeType":"52","messageId":"53","endLine":7,"endColumn":16},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'HomePage' is defined but never used."]